import google.generativeai as genai
import os
from dotenv import load_dotenv
from google.generativeai.types import content_types
from collections.abc import Iterable
from pydantic import BaseModel, ConfigDict
from typing import Optional,List ,Dict


import enum
from typing import Dict, List, Optional, Union, Any
from pydantic import BaseModel, Field
load_dotenv()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
class Choice(BaseModel):
    text: str
    next_node: str
    function: Optional[str] = None

class Node(BaseModel):
    id: str
    location: Optional[str] = None
    text: str
    choices: List[Choice]

class TextAdventure(BaseModel):
    nodes: Dict[str, Node]



json_schema = TextAdventure.model_json_schema()



def generate_plot_as_nodes(plot: str) -> str:
    """Calls a Gemini client to generate a string based on the plot and other rules which will be turned into dictionary of nodes
    Args:
        plot(str): The plot generated by another AI
    Returns: 
        A string convertable into a dict
    """
    print("\nGenerating plot as nodes")

   
    # Create a properly formatted prompt with the plot and schema
    prompt = f"""Generate a story based on this plot: {plot}.   ArticleResponse = {json_schema}
    Return a `ArticleResponse`."""
    
    con = genai.GenerationConfig(response_mime_type= "application/json")
    
    # Use the configured client instead of creating a new one
    model = genai.GenerativeModel(model_name="gemini-2.0-flash",generation_config=con)
    response = model.generate_content(prompt)
    
    print(f"Response = {response.text}")
    return response.text

generate_plot_as_nodes("The King pleads with a young hero. A fearsome dragon threatens the kingdom and has kidnapped the princess. Will you accept the quest to defeat the dragon?")
